/**
 * @packageDocumentation
 * @module api.functional.v1.cash_receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ITossCashReceipt } from "../../../structures/ITossCashReceipt";

/**
 * 현금 영수증 발행하기.
 * 
 * @param input 입력 정보
 * @returns 현금 영수증 정보
 * @security basic
 * @author Samchon
 * 
 * @controller FakeTossCashReceiptsController.create
 * @path POST /v1/cash-receipts
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    input: create.Input,
): Promise<create.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...create.METADATA,
            path: create.path(),
        } as const,
        input,
    );
}
export namespace create {
    export type Input = Primitive<ITossCashReceipt.ICreate>;
    export type Output = Primitive<ITossCashReceipt>;

    export const METADATA = {
        method: "POST",
        path: "/v1/cash-receipts",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/v1/cash-receipts`;
    }
}

/**
 * 현금 영수증 취소하기.
 * 
 * @param receiptKey 현금 영수증의 {@link ITossCashReceipt.receiptKey}
 * @param input 취소 입력 정보
 * @returns 취소된 현금 영수증 정보
 * @security basic
 * @author Samchon
 * 
 * @controller FakeTossCashReceiptsController.cancel
 * @path POST /v1/cash-receipts/:receiptKey/cancel
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cancel(
    connection: IConnection,
    receiptKey: string,
    input: cancel.Input,
): Promise<cancel.Output> {
    return PlainFetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        {
            ...cancel.METADATA,
            path: cancel.path(receiptKey),
        } as const,
        input,
    );
}
export namespace cancel {
    export type Input = Primitive<ITossCashReceipt.ICancel>;
    export type Output = Primitive<ITossCashReceipt>;

    export const METADATA = {
        method: "POST",
        path: "/v1/cash-receipts/:receiptKey/cancel",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (receiptKey: string): string => {
        return `/v1/cash-receipts/${encodeURIComponent(receiptKey ?? "null")}/cancel`;
    }
}