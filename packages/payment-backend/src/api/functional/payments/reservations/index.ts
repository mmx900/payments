/**
 * @packageDocumentation
 * @module api.functional.payments.reservations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { EncryptedFetcher } from "@nestia/fetcher/lib/EncryptedFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IPaymentReservation } from "../../../structures/payments/IPaymentReservation";
import type { IPaymentSource } from "../../../structures/payments/IPaymentSource";

/**
 * 간편 결제 수단 조회하기.
 *
 * @param input 간편 결제 수단의 원천 정보 + 비밀번호
 * @returns 결제 내역
 *
 * @controller PaymentReservationsController.get
 * @path PATCH /payments/reservations/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  input: IPaymentSource.IAccessor,
): Promise<get.Output> {
  return EncryptedFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...get.METADATA,
      path: get.path(),
    },
    input,
  );
}
export namespace get {
  export type Input = IPaymentSource.IAccessor;
  export type Output = IPaymentReservation;

  export const METADATA = {
    method: "PATCH",
    path: "/payments/reservations/get",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: null,
  } as const;

  export const path = () => "/payments/reservations/get";
}

/**
 * 간편 결제 수단 조회하기.
 *
 * @param id Primary Key
 * @param input 비밀번호
 * @returns 간편 결제 수단 정보
 *
 * @controller PaymentReservationsController.at
 * @path PATCH /payments/reservations/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & Format<"uuid">,
  input: IPaymentSource.IPassword,
): Promise<at.Output> {
  return EncryptedFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...at.METADATA,
      path: at.path(id),
    },
    input,
  );
}
export namespace at {
  export type Input = IPaymentSource.IPassword;
  export type Output = IPaymentReservation;

  export const METADATA = {
    method: "PATCH",
    path: "/payments/reservations/:id",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: null,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/payments/reservations/${encodeURIComponent(id ?? "null")}`;
}

/**
 * 간편 결제 수단 등록하기.
 *
 * @param input 간편 결제 수단 입력 정보
 * @returns 간편 결제 수단 정보
 *
 * @controller PaymentReservationsController.create
 * @path POST /payments/reservations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: IPaymentReservation.ICreate,
): Promise<create.Output> {
  return EncryptedFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "text/plain",
      },
    },
    {
      ...create.METADATA,
      path: create.path(),
    },
    input,
  );
}
export namespace create {
  export type Input = IPaymentReservation.ICreate;
  export type Output = IPaymentReservation;

  export const METADATA = {
    method: "POST",
    path: "/payments/reservations",
    request: {
      type: "text/plain",
      encrypted: true,
    },
    response: {
      type: "text/plain",
      encrypted: true,
    },
    status: null,
  } as const;

  export const path = () => "/payments/reservations";
}
